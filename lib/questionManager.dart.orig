/*
App:
    einmaleins Trainer
file:
    questionManager.dart

Copyright (c) 2019
ralf Weinert <downad@freenet.de>
Source Code:
https://github.com/downad/flutter_einmaleins
License: GPLv2.1

*/

import 'package:flutter/material.dart';

import './questionCollection.dart';
import './questionManagerGlobals.dart';
import './questionValue.dart';

class QuestionManager extends StatefulWidget {
  // Aufgabe:
  // - holen der Frage nach Fragenliste
  // - bereitstellen der GUi mit
  //  - Rubrik als Bild
  //  - Thema als Fragentitel
  //    - mit Punkte
  //  - Aufgabe
  //  - 4 Buttons
  //  - der Lösung
  //  - einem Weiter-Button


  // Dieser Bool wird gesetzen, wenn ein Lösungs-Button gedrückt wird
  bool tryToSolveQuestion = false;
  // Dieser Bool wird gesetzt, wenn die Frage richtig beantwortet wurde
  bool solvedQuestion = false;

  // das ist die Farbe des Weiter-Button
  Color raisedButtonColor = Colors.lightBlue;

  // Der Punktestand des Spielers
  int playerCounter = 0;


  // Diese Finals können gesetzt werden, damit die Fragen genauer spezifiziert werden können.
  final String questionRubrik;
  final String questionThema;
  final int maxQuestions;

  // Konstuktor, der die Rubrik, und das Thema übergeben bekommt
  QuestionManager(this.questionRubrik, this.questionThema, this.maxQuestions) {
    print('[QuestionManager Widget] Constructor');
    print('[QuestionManager Widget] Constructor - maxQuestion = ' + this.maxQuestions.toString() );

  }

  @override
  State<StatefulWidget> createState() {
    print('[QuestionManager Widget] createState');
    return _QuestionManagerState(this.questionRubrik, this.questionThema, this.maxQuestions);
  }
}

class _QuestionManagerState extends State<QuestionManager> {
  // Lade einige Globals für QuestionManager
  QuestionManagerGlobals QUESTGLOBAL = new QuestionManagerGlobals();

  // Counter für die Fragen
  int questionNumber = 0;
  List<int> listOfQuestions = [];

  bool endOfQuestions = false;

  // Wie soll die Lösung angezeigt werden?
  // 0 = nicht zeigen,
  // 1 = richtige Lösung zeigen,
  // 2 = falsch, Lösung zeigen
  int showSolution = 0;


  // Das ist die Liste der Fragen
  QuestionCollection questionArray = new QuestionCollection();


  // Das ist eine MusterFrage, dieser wird später mit der aktuellen überschrieben
  //                                 [Rubrik, Thema, Aufgaben, Richtige Lösung, Erklärung, Korreckte Antwort, L1, L2, L3, L4
  //                                  0        1       2           3               4           5               6   7   8   9
  QuestionValue Quest = new QuestionValue(['05022019','1','2','3','4','5','Start','Start','Start','Start']);

  // Konstruktor
  _QuestionManagerState(String questionRubrik,  String questionThema, int maxQuestions) {
    print('[QuestionManager State] _QuestionManagerState - widget.maxQuestion = ' + maxQuestions.toString());
    print('[QuestionManager State] _QuestionManagerState - widget.maxQuestion = ' + questionRubrik);
    print('[QuestionManager State] _QuestionManagerState - widget.maxQuestion = ' + questionThema);
    // hole die passenden Fragen
    this.listOfQuestions = List.from(this.questionArray.getRandomQuestionList(questionRubrik, questionThema, maxQuestions));

    createQuestionValue();
  }


  createQuestionValue() {
    int randomQuest = this.listOfQuestions.last;
    if (listOfQuestions.length > 1) {
      this.listOfQuestions.removeLast();
    } else {
      endOfQuestions = true;
      Navigator.popUntil(context, ModalRoute.withName('/'));
    }
    // Hole einen Fragen-Liste aus dem Speicher
    List<String> questionAnswerSolution = questionArray.getQuestion(randomQuest);
    // Baue die Frage, Antworten, Lösungen auf
    this.Quest = new QuestionValue(questionAnswerSolution);

  }

  // 07.02.2019 nötig?
  @override
  void initState() {
    print('[QuestionManager State] initState');
    //_questions.add(widget.startingProduct);
    super.initState();
  }

  // 07.02.2019 nötig?
  @override
  void didUpdateWidget(QuestionManager oldWidget) {
    print('[QuestionManager State] didUpdateWidget');
    super.didUpdateWidget(oldWidget);
  }

  @override
  Widget build(BuildContext context) {
    print('[QuestionManager State] build() questionNumber = ' + this.questionNumber.toString());
    //List<int> listOfQuestions = List.from(this.mathQuestion.getRandomQuestionList(10));
    print('[QuestionManager State] build() Fragenliste: ' + listOfQuestions.toString());
    // Hole eine  Fragen-Liste und zerlege sie
    createQuestionValue();

    // Die Widgets der Seite
    // *1* - das Bild - Rubrik der Frage
    Widget imageSection = Container(
      child: Image.asset(
        // Zeige ein Bild von der Kategorie
        //questionTypeMap[questionType],
        QUESTGLOBAL.getQuestionTypImageByName(Quest.getQuestionType()),
        width: 600,
        height: 240,
        fit: BoxFit.cover,
      ),
    );

    // Die Widgets der Seite
    // *2* - der Titel - Thema der Frage und die Punkte
    Widget titleSection = Container(
      padding: const EdgeInsets.all(16),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        /* Textzeile unter dem Bild */
        children: [
          Expanded(
            child: Text(
              // Fragentitel
              Quest.getQuestionTitle(),
              //this.questionBlock,
              style: TextStyle(
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          Column(
            children: [
              Icon(
                Icons.star,
                color: Colors.green,
              ), //Anzahl der Richtigen Aufgaben
              Text(
                //'41 von 50',
                widget.playerCounter.toString(),
                textAlign: TextAlign.right,
              ),
            ],
          ),
        ],
      ),
    );

    // Die Widgets der Seite
    // *3* - Die Frage
    Widget questionSection = Container(
      padding: const EdgeInsets.all(32),
      child: Text(
        Quest.getQuestionText(),
        //this.question,
        //'Berechen 6 x 8.',
        softWrap: true,
      ),
    );



    Column _buildButtonColumn(Color color, iconByNumber, String label) {
      //IconData icon = iconButtonMap[iconByNumber];
      IconData icon = QUESTGLOBAL.getIconButtonByNumber(iconByNumber);
      return Column(
        mainAxisSize: MainAxisSize.min,
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          IconButton(
              icon: Icon(icon, color: color),
              onPressed: widget.tryToSolveQuestion == true
                  ? null
                  : () { // () {
                print('[QuestionManager State] _buildButtonColumn iconByNumber =  ' + iconByNumber.toString());
                print('[QuestionManager State] _buildButtonColumn correctAnswer =  ' + Quest.getCorrectAnswer().toString());
                // Löseversuch!
                widget.tryToSolveQuestion = true;
                // es könnte die Falsche Lösung sein!
                if (Quest.getCorrectAnswer() == iconByNumber.toString() ) {
                    setState(() {
                      this.showSolution = 1;
                      widget.solvedQuestion = true;
                      widget.raisedButtonColor = Colors.lightGreen;
                      widget.playerCounter++;
                    });
                  } else {
                    setState(() {
                      this.showSolution = 2;
                      widget.solvedQuestion = false;
                      widget.raisedButtonColor = Colors.red;
                      widget.playerCounter-=2;
                      //widget.tryToSolveQuestion=false;
                    });
                  }
                //}
                print('[QuestionManager State] _buildButtonColumn this.showSolution =  ' + this.showSolution.toString());
                print('[QuestionManager State] _buildButtonColumn widget.tryToSolveQuestion  =  ' + widget.tryToSolveQuestion .toString());
              }),
          Container(
            margin: const EdgeInsets.only(top: 8),
            child: Text(
              label,
              style: TextStyle(
                fontSize: 12,
                fontWeight: FontWeight.w400,
                color: color,
              ),
            ),
          ),
        ],
      );
    }

    Color color = Theme.of(context).primaryColor;

    // Die Widgets der Seite
    // *4* - erzeuge die Buttonsection mit 4 Icon-Button á la Wer wird Millionär
    Widget answerSection = Container(
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          _buildButtonColumn(color, 1, Quest.getSolution(0)), //this.solution[0]),
          //'Lösung 1'),
          _buildButtonColumn(color, 2, Quest.getSolution(1)), //this.solution[1]),
          //'Lösung 2'),
          _buildButtonColumn(color, 3, Quest.getSolution(2)), //this.solution[2]),
          //'Lösung 3'),
          _buildButtonColumn(color, 4, Quest.getSolution(3)), //this.solution[3]), //'Lösung 4'),
        ],
      ),
    );

    // Die Widgets der Seite
    // *5* - Die Lösung in passender Farbe
    // mit einem 'Weiter'-Button
    Widget solutionSection = Container(
      padding: const EdgeInsets.all(32),
      child: Column(
        children: [
          Text(
            // Lösungstext
            Quest.getSolutionText(showSolution),
            style: new TextStyle(
              color: Colors.black,
              fontWeight: FontWeight.bold,
              background: Paint()..color = widget.raisedButtonColor),
            //this.solutionText[showSolution],
            softWrap: true,
          ),
          RaisedButton(
            color: widget.tryToSolveQuestion ? widget.raisedButtonColor: Colors.grey,
            //color: widget.tryToSolveQuestion ? raisedButtonColor : Colors.grey,
            child: Text('Weiter'),
            onPressed: () {
              if (widget.solvedQuestion == true) {
                setState(() {
                  print('[QuestionManager State] solutionSection correctAnswer =  ' + Quest.getCorrectAnswer().toString());
                  this.questionNumber++;
                  widget.solvedQuestion = false;
                  widget.tryToSolveQuestion = false;
                  this.showSolution = 0;
                });
              } else {
                setState(() {
                  print('[QuestionManager State] solutionSection Falseanswer =  ' + Quest.getCorrectAnswer().toString());
                  this.questionNumber++;
                  widget.solvedQuestion = false;
                  widget.tryToSolveQuestion = false;
                  this.showSolution = 0;
                  //widget.raisedButtonColor = Colors.red;
                });
              };
              if (endOfQuestions) {
                Navigator.popUntil(context, ModalRoute.withName('/'));
              }
            }),
        ],
      ),
    );

    // return eine imageSection, titleSection, questionSection, answerSection, solutionSection
    return Column(
      children: [
        imageSection,           // Das Bild mit der Rubrik
        titleSection,             // Textzeile unter dem Bild mit Thema und Aufgaben von...
        questionSection,          // Die Frage
        answerSection,            // Die Antworten
        solutionSection,          // Die Lösung
      ],
    );

  }
}
